; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\DOTlaptop\source\repos\Demolab8.5\Demolab8.5\Source.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG8239	DB	'This is a test string.', 00H
	ORG $+1
$SG8240	DB	'This is a test string.', 00H
	ORG $+1
$SG8241	DB	'!@#$%^&*()', 00H
	ORG $+1
$SG8242	DB	'!@#$%^&*()', 00H
	ORG $+1
$SG8243	DB	'This is a normal string the but main() will pass zero as'
	DB	' a string length.', 00H
	ORG $+6
$SG8244	DB	'This is a normal string the but main() will pass zero as'
	DB	' a string length.', 00H
	ORG $+6
$SG8245	DB	'This is a normal string but main() will pass an invalid '
	DB	'string length.', 00H
	ORG $+1
$SG8246	DB	'This is a normal string but main() will pass an invalid '
	DB	'string length.', 00H
	ORG $+1
$SG8247	DB	'UNIT TEST #%d STRING:', 0aH, 09H, 00H
$SG8250	DB	'Passing a non null-terminated string.', 0aH, 00H
	ORG $+1
$SG8253	DB	'Passing a NULL pointer.', 0aH, 00H
	ORG $+3
$SG8256	DB	09H, 'PASS', 0aH, 00H
	ORG $+1
$SG8257	DB	09H, 'FAIL', 0aH, 00H
	ORG $+1
$SG8258	DB	0aH, '********************************', 0aH, 00H
	ORG $+1
$SG8259	DB	'This program ran %d unit tests.', 0aH, 00H
	ORG $+3
$SG8260	DB	'Your header passed %d unit tests.', 0aH, 00H
	ORG $+1
$SG8261	DB	'********************************', 0aH, 00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	_puts:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_strlen:PROC
EXTRN	_reverse_it:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_tempStrLen$ = -300					; size = 4
_testString4$ = -296					; size = 4
_tempReturnValue$ = -292				; size = 4
_numUnitTestsPassed$ = -288				; size = 4
_totalUnitTestsRun$ = -284				; size = 4
_i$ = -280						; size = 4
_testStringReturnValues$ = -276				; size = 24
_testStringLength$ = -252				; size = 24
_testStringArray$ = -228				; size = 24
_testString5$ = -204					; size = 74
_testString6$ = -128					; size = 71
_testString1$ = -56					; size = 23
_testString3$ = -32					; size = 11
_testString2$ = -20					; size = 15
__$ArrayPad$ = -4					; size = 4
_main	PROC
; File c:\users\dotlaptop\source\repos\demolab8.5\demolab8.5\source.c
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
; Line 13
	mov	DWORD PTR _i$[ebp], 0
; Line 14
	mov	DWORD PTR _tempStrLen$[ebp], 0
; Line 15
	mov	DWORD PTR _tempReturnValue$[ebp], 0
; Line 16
	mov	DWORD PTR _totalUnitTestsRun$[ebp], 0
; Line 17
	mov	DWORD PTR _numUnitTestsPassed$[ebp], 0
; Line 18
	mov	ecx, 5
	mov	esi, OFFSET $SG8240
	lea	edi, DWORD PTR _testString1$[ebp]
	rep movsd
	movsw
	movsb
; Line 19
	mov	BYTE PTR _testString2$[ebp], 78		; 0000004eH
	mov	BYTE PTR _testString2$[ebp+1], 111	; 0000006fH
	mov	BYTE PTR _testString2$[ebp+2], 116	; 00000074H
	mov	BYTE PTR _testString2$[ebp+3], 32	; 00000020H
	mov	BYTE PTR _testString2$[ebp+4], 116	; 00000074H
	mov	BYTE PTR _testString2$[ebp+5], 101	; 00000065H
	mov	BYTE PTR _testString2$[ebp+6], 114	; 00000072H
	mov	BYTE PTR _testString2$[ebp+7], 109	; 0000006dH
	mov	BYTE PTR _testString2$[ebp+8], 105	; 00000069H
	mov	BYTE PTR _testString2$[ebp+9], 110	; 0000006eH
	mov	BYTE PTR _testString2$[ebp+10], 97	; 00000061H
	mov	BYTE PTR _testString2$[ebp+11], 116	; 00000074H
	mov	BYTE PTR _testString2$[ebp+12], 101	; 00000065H
	mov	BYTE PTR _testString2$[ebp+13], 100	; 00000064H
	mov	BYTE PTR _testString2$[ebp+14], 33	; 00000021H
; Line 20
	mov	eax, DWORD PTR $SG8242
	mov	DWORD PTR _testString3$[ebp], eax
	mov	ecx, DWORD PTR $SG8242+4
	mov	DWORD PTR _testString3$[ebp+4], ecx
	mov	dx, WORD PTR $SG8242+8
	mov	WORD PTR _testString3$[ebp+8], dx
	mov	al, BYTE PTR $SG8242+10
	mov	BYTE PTR _testString3$[ebp+10], al
; Line 21
	mov	DWORD PTR _testString4$[ebp], 0
; Line 22
	mov	ecx, 18					; 00000012H
	mov	esi, OFFSET $SG8244
	lea	edi, DWORD PTR _testString5$[ebp]
	rep movsd
	movsw
; Line 23
	mov	ecx, 17					; 00000011H
	mov	esi, OFFSET $SG8246
	lea	edi, DWORD PTR _testString6$[ebp]
	rep movsd
	movsw
	movsb
; Line 24
	lea	ecx, DWORD PTR _testString1$[ebp]
	mov	DWORD PTR _testStringArray$[ebp], ecx
	lea	edx, DWORD PTR _testString2$[ebp]
	mov	DWORD PTR _testStringArray$[ebp+4], edx
	lea	eax, DWORD PTR _testString3$[ebp]
	mov	DWORD PTR _testStringArray$[ebp+8], eax
	mov	ecx, DWORD PTR _testString4$[ebp]
	mov	DWORD PTR _testStringArray$[ebp+12], ecx
	lea	edx, DWORD PTR _testString5$[ebp]
	mov	DWORD PTR _testStringArray$[ebp+16], edx
	lea	eax, DWORD PTR _testString6$[ebp]
	mov	DWORD PTR _testStringArray$[ebp+20], eax
; Line 25
	lea	ecx, DWORD PTR _testString1$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _testStringLength$[ebp], eax
	mov	DWORD PTR _testStringLength$[ebp+4], 15	; 0000000fH
	lea	edx, DWORD PTR _testString3$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _testStringLength$[ebp+8], eax
	mov	DWORD PTR _testStringLength$[ebp+12], 999 ; 000003e7H
	mov	DWORD PTR _testStringLength$[ebp+16], 0
	mov	DWORD PTR _testStringLength$[ebp+20], -999 ; fffffc19H
; Line 26
	mov	DWORD PTR _testStringReturnValues$[ebp], 0
	mov	DWORD PTR _testStringReturnValues$[ebp+4], 0
	mov	DWORD PTR _testStringReturnValues$[ebp+8], 0
	mov	DWORD PTR _testStringReturnValues$[ebp+12], -1
	mov	DWORD PTR _testStringReturnValues$[ebp+16], -2 ; fffffffeH
	mov	DWORD PTR _testStringReturnValues$[ebp+20], -2 ; fffffffeH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$[ebp], 6
	jae	$LN3@main
; Line 31
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET $SG8247
	call	_printf
	add	esp, 8
; Line 33
	cmp	DWORD PTR _i$[ebp], 1
	jne	SHORT $LN7@main
; Line 35
	push	OFFSET $SG8250
	call	_printf
	add	esp, 4
; Line 36
	jmp	SHORT $LN8@main
$LN7@main:
; Line 37
	cmp	DWORD PTR _i$[ebp], 3
	jne	SHORT $LN9@main
; Line 39
	push	OFFSET $SG8253
	call	_printf
	add	esp, 4
; Line 40
	jmp	SHORT $LN8@main
$LN9@main:
; Line 43
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _testStringArray$[ebp+edx*4]
	push	eax
	call	_puts
	add	esp, 4
$LN8@main:
; Line 46
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _testStringLength$[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _testStringArray$[ebp+eax*4]
	push	ecx
	call	_reverse_it
	add	esp, 8
	mov	DWORD PTR _tempReturnValue$[ebp], eax
; Line 47
	mov	edx, DWORD PTR _totalUnitTestsRun$[ebp]
	add	edx, 1
	mov	DWORD PTR _totalUnitTestsRun$[ebp], edx
; Line 49
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tempReturnValue$[ebp]
	cmp	ecx, DWORD PTR _testStringReturnValues$[ebp+eax*4]
	jne	SHORT $LN11@main
; Line 51
	push	OFFSET $SG8256
	call	_printf
	add	esp, 4
; Line 52
	mov	edx, DWORD PTR _numUnitTestsPassed$[ebp]
	add	edx, 1
	mov	DWORD PTR _numUnitTestsPassed$[ebp], edx
; Line 53
	jmp	SHORT $LN12@main
$LN11@main:
; Line 56
	push	OFFSET $SG8257
	call	_printf
	add	esp, 4
$LN12@main:
; Line 58
	jmp	$LN2@main
$LN3@main:
; Line 59
	push	OFFSET $SG8258
	call	_printf
	add	esp, 4
; Line 60
	mov	eax, DWORD PTR _totalUnitTestsRun$[ebp]
	push	eax
	push	OFFSET $SG8259
	call	_printf
	add	esp, 8
; Line 61
	mov	ecx, DWORD PTR _numUnitTestsPassed$[ebp]
	push	ecx
	push	OFFSET $SG8260
	call	_printf
	add	esp, 8
; Line 62
	push	OFFSET $SG8261
	call	_printf
	add	esp, 4
$LN5@main:
; Line 64
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN6@main
	jmp	SHORT $LN5@main
$LN6@main:
; Line 65
	xor	eax, eax
; Line 66
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 954
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 957
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 958
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 959
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 960
	mov	eax, DWORD PTR __Result$[ebp]
; Line 961
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 644
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 88
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
